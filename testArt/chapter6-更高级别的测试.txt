1、软件产品开发周期模型；7个步骤；
  1、最终用户--》将软件最终用户的要求转换为一系列书面的需求；这些需求就是改软件产品要实现的目标--》需求；
  2、需求--》通过评估可行性与成本，消除相抵触的用户需求，建立优先级和平衡关系，将用户需求转换为具体的目标对象--》目标；
  3、目标--》将目标转换为一个准确的产品规格说明，将产品视为一个黑盒，仅考虑其接口以及与最终用户的交互--》“外部规格说明”；
  4、外部规格说明--》产品是一个系统，而不仅是一个程序；进行系统设计，将系统分割为单独的程序、部件或子系统，并定义它们的接口--》系统设计；
  5、系统设计--》通过定义每个模块的功能、模块的层次结构以及模块间的接口，来设计程序或程序集合的接口--》程序结构设计；
  6、程序结构设计--》设计一份准确的规格说明，定义每个模块的接口与功能--》模块接口规格说明；
  7、模块接口规格说明--》经过一个或更多的子步骤，将模块接口规格说明转换为每个模块的源代码算法--》代码；

2、需求规格说明定义了为什么要开发程序；
  目标定义了程序要做什么，以及应做得怎么样；
  外部规格说明定义了程序对用户的准确表现；
  后续文档--越来越详细地规定了程序是如何建立起来的；

3、模块测试的目标是发现程序模块与其接口规格说明之间的不一致；
  功能测试的目的是为了证明程序未能符合其外部规格说明；
  系统测试的目的是为了证明软件产品与其初始目标不一致；

4、功能测试的目的是为了暴露程序的错误以及与规格说明不一致之处，而不是为了证明程序符合其外部规格说明；
  系统测试有着特定的目标，将系统或程序与其初始目标进行比较；必须要有一组书面的、可度量的目标；

5、设计测试用例时应考虑全部的15种类型：
  1、能力测试：判断目标文档提及的每一项能力是否都确实已经实现；
  2、容量测试：程序经受大容量数据的检验；为了证明程序不能处理目标文档中规定的数据容量；
  3、强度测试：使程序承受高负载或强度的检验；很短时间间隔内达到的数据或操作的数量峰值；基于web的应用程序
  4、易用性测试：试图发现人为因素或易用性的问题；
    1、每个用户界面是否都根据最终用户的智力、教育背景和环境要求而进行了调整？
    2、程序的输出是否有意义、不模糊且没有计算机的杂乱信息？
    3、错误诊断（如错误信息）是否直接，用户是否需要有计算机学科的博士学位才能理解它们？
    4、整体的用户界面是否存在语法、惯例、语义、风格和缩写方面展现出了相当程度的概念完整性、基本的一致性和统一性？
    5、准确性；
    6、对于所有的输入，系统是否返回了某些类型的即时确认信息？
    7、程序是否易于使用？
  5、安全性测试：设计测试用例突破程序安全检查的过程；基于web的应用程序很需要，输入密码、数据库等；
  6、性能测试：设计测试用例来说明程序不能满足其性能目标；
  7、存储测试：设计测试用例来证明存储目标没有得到满足；内存和辅存的容量、临时文件或溢出文件的大小；
  8、配置测试：至少使用每一种类型的设备，以最大和最小的配置来测试程序；
  9、兼容性/配置/转换测试：兼容性目标未被满足、转换过程并未生效；
  10、安装测试：测试安装过程；安装测试是系统测试中的一个重要部分；
  11、可靠性测试：如果软件的目标中包含了对可靠性的特别描述，就必须设计专门的可靠性测试；
  12、可恢复性测试：可恢复性目标，说明系统如何从程序错误、硬件失效和数据错误中恢复过来；减小平均恢复时间；
  13、适用性测试：适用性或可维护性的目标；
  14、文档测试：检查用户文档的正确性；
  15、过程测试：在系统测试中，必须对所有已规定的人工过程，如系统操作员、数据库管理员或最终用户的操作过程进行测试；
  16、系统测试的执行：
    1、不能有程序员来进行系统测试；
    2、在所有的测试阶段之中，这是唯一一个明确地不能由负责该程序开发的机构来执行的测试；

6、验收测试：将程序与其最初的需求及最终用户当前的需要进行比较的过程；由程序的客户或最终用户来执行；

7、测试的计划与控制；
  良好的测试计划应包括：
  1、目标：必须定义每个测试阶段的目标；
  2、结束准则；
  3、进度：每个阶段都须有时间表；指出何时设计、编写和执行测试用例；
  4、责任：对于每一个阶段，应当确定谁来设计、编写和验证测试用例，谁来修改发现的软件错误；
  5、测试用例库及标准：在大型项目中，用于确定、编写以及存储测试用例的系统方法是必须的；
  6、工具：必须确定需要使用的测试工具；
  7、计算机时间；
  8、硬件配置；
  9、集成；
  10、跟踪步骤：必须跟踪测试进行中的方方面面，包括对错误易发模块的定位，以及有关进度、资源和结束准则的进展估计；
  11、调试步骤：必须制定上报已发现错误、跟踪错误修改进程以及将修改部分加入到系统中去的机制；
  12、回归测试；

8、测试结束准则，三类较为有用的结束准则：
  1、根据特定的测试用例设计技术；
  2、以确切的数量来描述结束测试的条件；发现错误的数量；
  3、在测试过程中记录每单位时间发现的额错误数量，通过检查统计曲线的形状，来决定究竟是继续该阶段的测试，还是结束它开始下一测试阶段；
