1、模块测试的动机；
  1、由于模块测试的注意力一开始集中在程序的较小单元上，因此它是一种管理组合的测试元素的手段；
  2、模块测试减轻了调试的难度，一旦某个错误被发现出来，我们就知道它在哪个具体的模块中；
  3、模块测试通过为我们提供同时测试多个模块的可能，将并行工程引入软件测试中；
  模块测试的目的是将模块的功能与定义模块的功能规格说明或接口规格说明进行比较；

2、测试用例设计，需要两种类型的信息：模块的规格说明和模块的源代码；
  模块测试总体上是面向白盒测试的；

3、模块测试过程中，主要考虑两点；
  1、如何设计一个有效的测试用例集；
  2、将模块组装成工作程序的方式；涉及到模块测试用例编写的形式，可能用到的测试工具类型、模块编码和测试的顺序、生成测试用例的成本以及调试的成本；

4、测试单独的模块需要一个特殊的驱动模块和一个或多个桩模块；
  驱动模块：用例将测试用例驱动或传输到被测模块中；
  非增量测试：每个单独的模块都先测试一遍，最后组装再测试；
  增量测试：测试一个模块，就组装一个模块；
  结论：
  1、非增量测试所需的工作量要多一些，每次测试都要准备桩模块；
  2、增量测试可以较早地发现模块中与不匹配接口、不正确假设相关的编程错误；
  3、增量测试的调试进行会更容易一些；
  4、增量测试会将测试进行得更彻底；
  5、非增量测试所占用的机器时间少一些；
  6、非增量测试有更多的机会进行并行操作；

5、两种增量测试策略：
  1、自顶向下的测试：从程序的顶部或初始模块开始；
  2、自底向上的增量测试策略；开始于程序中模块的终端模块；不足：没有早期程序框架的概念；

6、自顶向下，选取模块的两项指南：
  1、如果程序中存在关键部分， 那么在设计模块序列时就应将这些关键模块尽可能早地添加进去；
  2、在设计模块序列时，应将I/O模块尽可能早地添加进来；

7、模块测试的目的不是证明模块能够正确地允许，而是证明模块中存在着错误；