1、代码走查，一旦发现错误，通常就能在代码中对其进行精确定位；
  而基于计算机的测试通常只能暴露出错误的某个表征，错误通常是逐个地被发现并得到纠正的；

2、代码检查，着重在发现错误，而不是纠正错误：
  1、由程序编码人员逐条语句讲述程序的逻辑结构；
  2、对着历来常见的编码错误列表分析程序；

3、错误列表：
  1、数据引用错误；未初始化？数组越界？下标是否为整数？引用的内存单元是否分配？编译器预期？
  2、数据声明错误；
  3、运算错误；不一致的数据类型的变量间的运算？除数是否可能为0？操作符的优先顺序？
  4、比较错误；
  5、控制流程错误；所有循环最终都终止了？循环是否执行了？
  6、接口错误；实参数量、属性、顺序？
  7、输入输出错误；文件使用前打开了？使用后关闭了？
  8、其他；见书上p30，有列表总结；

4、同行评审：
  1、程序是否易于理解？
  2、高层次的设计是否可见且合理？
  3、低层次的设计是否可见且合理？
  4、修改此程序对于评审者而言是否容易？
  5、评审者是否会以编写该程序而骄傲？

 5、人工测试方法：
   1、利用错误列表进行代码检查；
   2、小组代码走查；
   3、桌面检查；
   4、同行评审；


学习测试，学到了什么，有多少竞争力，获得了什么能力，不要只是提测试用例；
有没有办法做过程改进；
能不能让开发的质量意识更高；
质量是靠设计来写出来的；
用例设计的最低限；
测试方法是否不足；
用例是跟着谁来走？场景，市场；
问题和建议？要写怎么执行，有没有方向，路线；
人生就像爬山，爬得越高，看得越远，目标越准确；
怕得罪人，没法进步；
UI自动化；
北极星指标，SMART原则（S=Specific、M=Measurable、A=Attainable、R=Relevant、T=Time-bound）
S代表目标必须是具体(Specific)，比如目标定为我要减肥，就不如我要减肥10斤具体。
M代表目标是可以衡量的(Measurable)，如果制定的目标都没办法衡量，那跟没有目标没差别。
A代表可实现(Attainable)，在付出努力的情况下可以实现，避免设立过高或过低的目标，一般设定的目标是可以踮踮脚可以达到的；
R代表相关性(Relevant），指绩效指标是与工作的其它目标是相关联的，如果公司的每个部门的目标跟公司的总体目标方向不一致的化，就会导致大家不再一个方向上努力，效率低。
T代表有明确的截止期限(Time-bound)。
运维只关心哪个环境，运维的工作活动是否影响了测试；

测试要抑制需求！不要产品提了就去写需求！要拷问产品，需求是必须要的吗，有用吗！

调研与选型、风险点与方案确定、最小闭环；

提供者就要认真提供，用户没时间还得去学习一下；

一旦发现一个东西有一定的可见性后，其产生速度就会很快；
所以先快点行动！