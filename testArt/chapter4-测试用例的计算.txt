1、在所有可能的测试用例中，哪个子集最有可能发现最多的错误；

2、黑盒测试：等价类划分、边界值分析、因果图分析、错误猜测；
  白盒测试：语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、多重条件覆盖；
  推荐先使用黑盒测试方法来设计测试用例，然后视情况需要使用白盒测试方法来设计补充的测试用例；

3、白盒测试——逻辑覆盖测试：
  关注的是测试用例执行的程度或覆盖程序逻辑结构（源代码）的程度；
  语句覆盖；
  判定覆盖或分支覆盖：要求必须编写足够的测试用例，使得每一个判断都至少有一个为真和为假的输出结果；并且每条语句都至少被执行一次；
  条件覆盖：编写足够的测试用例以确保将一个判断中的每个条件的所有可能的结果至少执行一次；
  判定/条件覆盖准则：将每一个判断中的每个条件的所有可能至少执行一次，将每个判定的所有可能的结果至少执行一次，将每个入口点都至少调用一次；
  多重条件覆盖：要求编写足够多的测试用例，将每个判定中的所有可能的条件结果的组合，以及所有的人口点都至少执行一次；

4、一个精心挑选的测试用例应该具备另外两个特性：
  1、严格空值测试用例的增加，减少为达到“合理测试”的某些既定目标而必须设计的其他测试用例的数量；
  2、覆盖率大部分其他可能的测试用例；

5、等价划分法的两个步骤：
  1、确定等价类；选取每一个输入条件，将其划分为有效等价类和无效等价类；
               1、如果输入条件规定了一个取值范围，那么应确定一个有效等价类，两个无效等价类（大于和小于范围）；
               2、如果输入条件规定了取值的个数，那么应确定一个有效等价类，两个无效等价类（少于和多于指定个数）；
               3、如果输入条件规定了一个输入值的集合，而且有理由认为程序会对每个值进行不同处理，应为每个输入值确定一个有效等价类和无效等价类；
               4、如果存在输入条件规定了“必须是”的情况，应该确定一个有效等价类和一个无效等价类；
  2、生成测试用例；
               1、为每个等价类设置一个不同的编号；
               2、编写新的测试用例，尽可能多地覆盖哪些尚未被涵盖的有效等价类，直到所有的有效等价类都被测试用例覆盖；
               3、编写新的用例，覆盖一个且仅一个尚未被涵盖的无效等价类，直到所有的无效等价类都被测试用例覆盖；

6、边界值分析法；指输入和输出等价类中那些恰好处于边界、或超过边界、或在边界以下的状态；
  与等价类划分法的不同点：
      1、与从等价类中挑选出任意一个元素作为代表不同，边界值分析需要选择一个或多个元素，以便等价类的每个边界都经过一次测试；
      2、与仅仅关注输入条件不同，还需要考虑从结果空间设计测试用例；
  方法：
      1、规定了输入值范围，针对范围的边界设计测试用例，越界情况设置测试用例；
      2、规定了输入值的数量，针对最小数量、最大数量、比最小数量少一个、比最大数量多一个的情况设置测试用例；
      3、输出条件的边界值；
      4、输出条件的数量值；
      5、输出条件的有序，第一个和最后一个元素；

7、因果图；因果图有助于用一个系统的方法选择出搞笑的测试用例集，还可以指出规格说明的不完整和不明确之处；
  过程如下：
  1、将规格说明分解为可执行的片段；
  2、确定规格说明中的因果关系；因，一个明确的输入条件或输入条件的等价类；果，一个输出条件或系统转换；
  3、分析规格说明的语义内容，并将其转换为连接因果关系的布尔图，即因果图；
  4、给图加上注解符号，说明由于语法或环境的限制而不能联系起来的“因”和“果”；
  5、通过仔细地跟踪途中的状态变化情况，将因果图转换成一个有限项的判定集；
  6、将判定表中的列转换成测试用例；
  复习时，请去看并做一做38页的例子；

8、错误猜测；依赖直觉的非正规的过程；
  基本思想是：列举出可能犯的错误或错误易发情况的清单，然后依据清单来编写测试用例；
  在阅读规格说明时，联系程序员可能做的假设来确定测试用例（要么是由于偶然因素，要么是程序员认为其显而易见）；

9、测试策略；
  1、如果规格说明中包含输入条件组合的情况，应首先使用因果图分析方法；
  2、在任何情况下都应使用边界值分析方法；
  3、应为输入和输出确定有效和无效等价类，在必要情况下对上面确认的测试用例进行补充；
  4、使用错误猜测技术增加更多的测试用例；
  5、针对上述测试用例集检查程序的逻辑结构；即覆盖准则；
